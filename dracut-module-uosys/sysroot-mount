#!/bin/bash

# TODO: add viritofs blocking
# TODO: network boot support, maybe different module
# TODO: loop device support
# TODO: single system support, for vps, maybe different default uuid for vps
# TODO: resize partition in vps mode on first boot, see https://github.com/robsonde/digitalocean_builder
# TODO: make this more robust, exit on error if mounting failed, maybe remove all mounts?

source /usr/lib/os/sysroot-mount-lib

set_rootfs() {
  mount -t tmpfs -o size=1m tmpfs /sysroot
  # TODO: maybe set the timestamp of usr so systemd-update-done.service won't fail
  mkdir -m755 /sysroot/{apps,data,dev,efi,run,usr,var}
  mkdir -m555 /sysroot/{proc,sys}
  mkdir -m750 /sysroot/root
  mkdir -m1777 /sysroot/tmp
  ln -s run/mount /sysroot/mnt
  ln -s usr/bin /sysroot/bin
  ln -s usr/bin /sysroot/sbin
  ln -s usr/etc /sysroot/etc
  ln -s usr/lib /sysroot/lib
  ln -s usr/lib /sysroot/lib64
  # not needed with dracut 054
  #ln -s usr/lib/boot /sysroot/boot
  ln -s var/homes /sysroot/home
  ln -s var/srv /sysroot/srv
  mount -t tmpfs -o remount,ro,size=1m tmpfs /sysroot
}

# TODO: more var unsetting?
unset uuid islive

islive=$(getarg rd.uosys.live)

mode=$(getarg rd.uosys.mode)

# TODO: add live system subvol mode
if [ "$mode" = ab ] ||
  [ "$mode" = virtiofs_ab ]; then

  active=$(getarg rd.uosys.mode.active)
  # fallback to a
  [ $? -ne 0 -o "$active" = '1' ] &&
    active=a

  set_rootfs

  if [ "$mode" = ab ]; then
    uuid=$(getuuid)
    [ -n "$uuid" ] || { echo "No uuid"; exit 1; }

    # device blocking
    # TODO: implement the dracut apparoch?
    # TODO: make this out into a function, module, maybe support non-uuid blocking
    tcount=$(( 0 ))
    tcountmax=$(( 50 ))
    while true; do
      if [ ! -e /dev/disk/by-uuid/${uuid} ] && [  $tcountmax -gt $tcount ]; then
        sleep 0.1
        (( tcount+1 ))
      else
        break
      fi
    done
    mount -t btrfs -o ro,noatime,ssd,space_cache,compress-force=zstd,subvol=system/${active} UUID=$uuid /sysroot/usr
    mount -t btrfs -o rw,noatime,ssd,space_cache,compress-force=zstd,subvol=apps UUID=$uuid /sysroot/apps
    if [ "$islive" = '1' ]; then
      mount -t tmpfs tmpfs /sysroot/var
    else
      mount -t btrfs -o rw,noatime,ssd,space_cache,compress-force=zstd,subvol=var UUID=$uuid /sysroot/var
      mount -t btrfs -o rw,noatime,ssd,space_cache,compress-force=zstd,subvol=data UUID=$uuid /sysroot/data
    fi
  elif [ "$mode" = virtiofs_ab ]; then
    mkdir -p /run/os
    mount -t virtiofs livesos /run/os
    mount --bind /run/os/system/${active} /sysroot/usr
    mount --bind /run/os/apps /sysroot/apps
    if [ "$islive" = '1' ]; then
      mount -t tmpfs tmpfs /sysroot/var
    else
      mount --bind /run/os/var /sysroot/var
      mount --bind /run/os/data /sysroot/data
    fi
  fi

elif [ "$mode" = virtiofs_system ]; then
  set_rootfs
  mount -t virtiofs system /sysroot/usr

  mount -t virtiofs apps /sysroot/apps ||
    mount -t tmpfs tmpfs /sysroot/apps
  mount -t virtiofs data /sysroot/data ||
    mount -t tmpfs tmpfs /sysroot/data
  if [ "$islive" = '1' ]; then
    mount -t tmpfs tmpfs /sysroot/var
  else
    mount -t virtiofs var /sysroot/var ||
      mount -t tmpfs tmpfs /sysroot/var
  fi

elif [ "$mode" = virtiofs_legacy ]; then
  # TODO: enable dax when its pr is merged into qemu
  #mount -t virtiofs -o dax liveos /sysroot
  mount -t virtiofs liveos /sysroot
  if [ "$islive" = '1' ]; then
    mount -t tmpfs tmpfs /sysroot/var
  fi
fi
