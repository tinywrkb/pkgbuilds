
###############################################################################
#                           MODULES AND BASIC SETUP                           #
###############################################################################

insmod part_gpt
insmod part_msdos
insmod regexp
insmod gzio
insmod part_gpt
insmod btrfs

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x$feature_default_font_path = xy ] ; then
   font=unicode
fi

if loadfont $font ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=en_US
  insmod gettext
fi

terminal_input console
terminal_output gfxterm

if [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
  set timeout=5
else
  set timeout=5
fi

###############################################################################
#                               DEFAULTS                                      #
###############################################################################


# TODO: shorter lebels, specifically efi, make them more unique
# some predefined defaults
set default_osuuid=34a329fa-8020-4139-9bd5-0d509a3c5ddd
set default_efiuuid=34a329fa-8020
set default_oslabel=sysos
set default_efilabel=sysefi

set default_live_osuuid=d95e8e7d-3f15-4e7b-a17c-a0a9075eea5d
set default_live_efiuuid=d95e8e7d-3f15
set default_live_oslabel=liveos
set default_live_efilabel=liveefi

# TODO: revisit default kparams, maybe more plymouth related kparams
set default_kparams="audit=0 loglevel=3 quiet splash systemd.condition-needs-update=false"
export default_kparams

# TODO: force machine_id for live media?
#live_kparams='rd.uosys.live=1 systemd.machine_id=a08a504e-864e-41e4-a60b-1a8a771403e6'
set live_kparams='rd.uosys.live=1'
export live_kparams

# TODO: support hardcoded custom uuids
#set custom_osuuid=34a329fa-8020-4139-9bd5-0d509a3c5ddd
#set custom_efiuuid=34a329fa-8020
# TODO: instead hardcoding which requires changing the config inject files into the image with check
#       for file existence with the $prefix var which defaults to (memdisk)/boot/grub
# set is_hardcoded=y
# set is_live=y

###############################################################################
#                            FILESYSTEM LOGIC                                 #
###############################################################################

# findefi
# exporting vars for submenu visibility
function findefi {
  if [ -n "${cmdpath}" ]; then
    # cmdpath is non-empty so let's try getting efi drv
    regexp --set 1:efidrv '^\((.*)\).*' $cmdpath
    regexp --set 1:efidrv '^([^,]*).*' $efidrv
    # TODO: if fails then try to use cmdpath to find env file and read uuids
    if [ -n "${efidrv}" ]; then
      set efipart=$efidrv,gpt1
      if probe --set=efiuuid --fs-uuid $efipart; then
        export efidrv efipart efiuuid
        # TODO: also set efilabel?
        #probe --set=efilabel --label $efipart
        #export efilabel
        return 0
      fi
    fi
  fi

  # TODO: this check is actually not needed so maybe remove?
  if [ -z "${efiuuid}" ]; then
    # TODO: support hints
    # if [ x$feature_platform_search_hint = xy ]; then
    #   search --no-floppy --fs-uuid --set=ospart --hint-ieee1275='ieee1275//disk@0,gpt2' --hint-bios=hd0,gpt2 --hint-efi=hd0,gpt2 --hint-baremetal=ahci0,gpt2 $osuuid

    # TODO: maybe support here hardcoded uuid/label in the bootloader image? so read ro env file from memdisk/prefix
    # TODO: figure out priority of live and non-live modes when search
    # try searching by default uuid
    if search --no-floppy --fs-uuid --set=efipart $default_efiuuid; then
      regexp --set 1:efidrv '^([^,]*).*' $efipart
      set efiuuid=$default_efiuuid
      export efidrv efipart efiuuid
      # TODO: also set efilabel?
      #probe --set=efilabel --label $efipart
      #export efilabel
      return 0

    # try searching by default label
    elif search --no-floppy --label --set=efipart $default_efilabel; then
      regexp --set 1:efidrv '^([^,]*).*' $efipart
      # TODO: return value not tested because efiuuid is not really matter, exporting efipart & efidrv is
      probe --set=efiuuid --fs-uuid $efipart
      export efidrv efipart efiuuid
      # TODO: also set efilabel?
      #set efilabel=$default_efilabel
      #export efilabel
      return 0

    # this is the portable mode so maybe also set as live?
    # TODO: maybe search here by file
    elif search --file --set=efipart /efi/boot/bootx64.efi; then
      regexp --set 1:efidrv '^([^,]*).*' $efipart
      # TODO: return value not tested because efiuuid is not really matter, exporting efipart & efidrv is
      probe --set=efiuuid --fs-uuid $efipart
      export efidrv efipart efiuuid
      # TODO: also set efilabel?
      #probe --set=efilabel --label $efipart
      #export efilabel
      return 0
    fi
  fi

  return 1
}

# findlive
function findlive {
  # TODO: also test efilabel?
  if [ -f "${efiprefix}"/live ]; then
    return 0
  fi
  return 1
}

# findos
# exporting vars for submenu visibility
function findos {

  # let's try first finding ids saved in the env file
  # get osuuid from env file
  if [ -n "${saved_osuuid}" ]; then
    if search --no-floppy --fs-uuid --set=ospart $saved_osuuid; then
      set osuuid=$saved_osuuid
      export ospart osuuid
      # TODO: also set oslabel?
      return 0
    fi
  fi

  # TODO: enable this?
  # get oslabel from env file
  #if [ -n "${saved_oslabel}" ]; then
  #  if search --no-floppy --label --set=ospart $saved_oslabel; then
  #    set oslabel=$saved_oslabel
  #    # here we test because osuuid is important for booting
  #    if probe --set=osuuid --fs-uuid $ospart; then
  #      export ospart osuuid
  #      # TODO: also export oslabel?
  #      return 0
  #    fi
  #  fi
  #fi

  # take a shortcut and try the most reasonable location
  if [ -n "${efidrv}" ]; then
    # TODO: actually need to give priority for osuuid from env file
    # read from var osuuid
    # check if the next part
    set ospart=$efidrv,gpt2
    # TODO: maybe disable this test?
    if [ -d "(${ospart})"/boot -o -d "(${ospart})"/legacy ]; then
      if probe --set=osuuid --fs-uuid $ospart; then
        export ospart osuuid
        # TODO: also set oslabel?
        #probe --set=oslabel --label $ospart
        #export oslabel
        return 0
      fi
    fi
  fi

  # fall back to searching based on pre-set uuid & label values, hopefully this is never reached
  # osuuid is empty, this test might not be needed, figure out if there a case where it actually it's reached and failed
  if [ -z "${osuuid}" ]; then
    # try searching by default uuid
    if search --no-floppy --fs-uuid --set=ospart $default_osuuid; then
      set osuuid=$default_osuuid
      export ospart osuuid
      # TODO: also set oslabel?
      return 0
    # try searching by default label
    elif search --no-floppy --label --set=ospart $default_oslabel; then
      set oslabel=$default_oslabel
      probe --set=osuuid --fs-uuid $ospart
      export ospart osuuid
      # TODO: also export oslabel?
      return 0
    # at worst case, search by file
    elif search --file --set=ospart /boot/a/vmlinuz-linux-latest; then
      if probe --set=osuuid --fs-uuid $ospart; then
        export ospart osuuid
        # TODO: also set oslabel?
        #probe --set=oslabel --label $ospart
        #export oslabel
        return 0
      fi
    fi
  fi
  return 1
}

# TODO: this should actually move into a function in order to be able to early load the env file
# find the device we booted from

function fsinit {
  # running in hardcoded mode
  if [ x"${is_hardcoded}" = xy ]; then
    if [ x"${is_live}" = xy ]; then
      set osuuid=$default_live_osuuid
      set efiuuid=$default_live_efiuuid
      set oslabel=$default_live_oslabel
      set efilabel=$default_live_efilabel
    else
      set osuuid=$default_osuuid
      set efiuuid=$default_efiuuid
      set oslabel=$default_oslabel
      set efilabel=$default_efilabel
    fi

    # confirm the hardcoded setting by checking if the partition actually exist

    # search for efi partition
    if search --no-floppy --fs-uuid --set=efipart $efiuuid; then
      probe --set=efilabel --label $efipart
    elif search --no-floppy --label --set=efipart $efilabel; then
      probe --set=efiuuid --fs-uuid $efipart
    #else
      # TODO: do we want to report an error here?
    fi

    # search for os partition
    if search --no-floppy --fs-uuid --set=ospart $osuuid; then
      probe --set=oslabel --label $ospart
    elif search --no-floppy --label --set=ospart $oslabel; then
      probe --set=osuuid --fs-uuid $ospart
    #else
      # TODO: here we should actually report an error
    fi

    # export the updated vars
    export efipart efiuuid ospart osuuid

  # non-hardcoded mode
  else
    # find the efi partition
    findefi

    # set here the efiprefix, used for env file loading and live file test
    if [ -n "${efipart}" ]; then
      if [ -d "(${efipart})"/efi/os ]; then
        set efiprefix=(${efipart})/efi/os
      elif [ -d "(${efipart})"/efi/boot ]; then
        # TODO: maybe also set here live mode?
        set efiprefix=(${efipart})/efi/boot
      fi
      export efiprefix
    fi

    # check if we are in live mode and set variable
    if [ x"${is_live}" != xy ]; then
      if findlive; then
        set is_live=y
        export is_live
      else
        set is_live=n
      fi
      export is_live
    fi

    # TODO: here we can load the env file
    envinit

    # find the os partition
    findos
  fi
}

###############################################################################
#                              ENVIRONMENT                                    #
###############################################################################

# TODO: variables used in menus might need exporting
function envinit {
  # don't use env file with live media
  if [ x"${is_live}" != xy -a -d "${efiprefix}" ]; then

    # find the env file location
    # TODO  worst case scenario: add searching by label
    #        if efi part cannot have label then use the btrfs fs label (use regex)
    # TODO: in the case efipart cannot be found then all the file related operations
    #       and env file specific need to be disabled
    # let's first try the device we booted from
    set env=$efiprefix/env
    # exporting env for submenu visibility
    export env

    if [ -s $env ]; then
      load_env -f $env
      if [ "${kparams}" ]; then
        export kparams
      fi
    fi

    if [ "${next_entry}" ]; then
       set default="${next_entry}"
       set next_entry=
       save_env -f $env next_entry
       set boot_once=true
    else
       set default="${saved_entry}"
    fi

    if [ "${prev_saved_entry}" ]; then
      set saved_entry="${prev_saved_entry}"
      save_env -f $env saved_entry
      set prev_saved_entry=
      save_env -f $env prev_saved_entry
      set boot_once=true
    fi

  fi
}

function savedefault {
  if [ x"${is_live}" != xy ]; then
    if [ -z "${boot_once}" ]; then
      saved_entry="${chosen}"
      save_env -f $env saved_entry
    fi
  fi
}

# TODO: figure out if a dedicated text file with kparams can somehow be read
# kernel parameters can be set per machine:
#   from grub command-line mode:
#     set kparams="someparam=somevalue otherparam=othervalue"
#     save_kparams
#   from the running system:
#     grub-editenv /efi/EFI/BOOT/BOOTX64.EFI set kparams="someparam=somevalue otherparam=othervalue"
function save_kparams {
  save_env -f $env kparams
}

function clear_kparams {
  set kparams=""
  save_env -f kparams
}

# source local config after loading the env file
if [ -s "${efiprefix}"/boot.cfg ]; then
  source "${efiprefix}"/boot.cfg
fi

###############################################################################
#                              FUNCTIONS                                      #
###############################################################################

# TODO: switch live system subvol
# TODO: don't create live subvol if is already update, need timestamp or system version support, need to add it in system builder
function set_system {
  set ab=a
  set ab_cap=A
  if [ -f "${efiprefix}"/bootb ]; then
    set ab=b
    set ab_cap=B
  fi
  export ab
  export ab_cap
}

function set_default_kerver {
  set default_kerver=$1
  save_env -f $env default_kerver
}

# default_kerver value is the same as the kernel file name without the 'vmlinux-linux-' prefix
# this can be set from:
#   grub command-line mode:
#     set_default_kerver lts
#    or
#     set_default_kerver latest
#   the running system:
#     grub-editenv /efi/EFI/BOOT/BOOTX64.EFI set default_kerver=lts
#    or
#     grub-editenv /efi/EFI/BOOT/BOOTX64.EFI set default_kerver=latest
function set_kerver {
  set kerver=latest
  if [ "${default_kerver}" ]; then
    set kerver=${default_kerver}
  fi
}

function set_kparams_run {
  if [ x"${is_live}" = xy ]; then
    set kparams_run="$default_kparams $kparams rd.uosys.osuuid=$osuuid rd.uosys.efiuuid=$efiuuid rd.uosys.mode=$boot_mode rd.uosys.mode.active=$ab $live_kparams"
  else
    set kparams_run="$default_kparams $kparams rd.uosys.osuuid=$osuuid rd.uosys.efiuuid=$efiuuid rd.uosys.mode=$boot_mode rd.uosys.mode.active=$ab"
  fi
  export kparams_run
}

###############################################################################
#                              BOOT MENU                                      #
###############################################################################

# filesystem init
fsinit

# TODO: this is temporary, need to rethink root handling
set root=${ospart}
#export root
# TODO: remove setting root in menus? what about boot a different device? like choosing a usb media?
# TODO: add menu item to set default kerver, it just runs a function
# TODO: add menu item to wipe system, it boot the system with a special kernel parameter, maybe boot systemd in system update mode, use initramfs?
# TODO: add menu item to switch active system a-b, grub cannot remove files so we need to ask the initramfs to do this
# TODO: add virtio-fs support, optional, compile-time, if label matches then create menu entries, kernel&initrd from os part, same structure /boot/{a,b} or legacy /boot

menuentry 'Arch Linux, Default Kernel' --class arch --class gnu-linux --class gnu --class os --id 'autoab-linux-default-simple' {
  savedefault
  load_video
  set gfxpayload=keep
  set root=${ospart}
  set_system
  set_kerver
  set boot_mode=ab
  set_kparams_run
  echo "Loading Linux linux-${kerver} (System $ab_cap) ..."
  linux /boot/$ab/vmlinuz-linux-${kerver} $kparams_run
  echo 'Loading initial ramdisk ...'
  initrd /boot/$ab/intel-ucode.img /boot/$ab/initramfs-linux-${kerver}.img
}

for kerver in latest lts; do
  menuentry "Arch Linux, Kernel ${kerver}" ${kerver} --class arch --class gnu-linux --class gnu --class os --id "autoab-linux-${kerver}-simple" {
    savedefault
    load_video
    set gfxpayload=keep
    set root=${ospart}
    set_system
    set boot_mode=ab
    set kerver=${2}
    set_kparams_run
    echo "Loading Linux linux-${kerver} (System $ab_cap) ..."
    linux /boot/$ab/vmlinuz-linux-${kerver} $kparams_run
    echo 'Loading initial ramdisk ...'
    initrd /boot/$ab/intel-ucode.img /boot/$ab/initramfs-linux-${kerver}.img
  }
done

submenu 'Advanced options for Arch Linux' --id 'linux-advanced-menu' {
  for kerver in latest lts; do
    for ab in a b; do
      if [ $ab = a ]; then
        set ab_cap=A
      else
        set ab_cap=B
      fi
      menuentry "Arch Linux, System ${ab_cap}, Kernel ${kerver}" ${kerver} ${ab} ${ab_cap} --class arch --class gnu-linux --class gnu --class os --id "${ab}-linux-${kerver}-advanced" {
        savedefault
        load_video
        set gfxpayload=keep
        set root=${ospart}
        set ab=${3}
        set ab_cap=${4}
        set boot_mode=ab
        set kerver=${2}
        set_kparams_run
        echo "Loading Linux linux-${kerver} (System $ab_cap) ..."
        linux /boot/$ab/vmlinuz-linux-${kerver} $kparams_run
        echo 'Loading initial ramdisk ...'
        initrd /boot/$ab/intel-ucode.img /boot/$ab/initramfs-linux-${kerver}.img
      } # end of menuentry
    done # end of for ab in a b
  done # end of for kerver in latest lts
} # end of submenu 'Advanced options for Arch Linux'

# TODO: figure out if we need to force locating root
if [ -d /legacy ]; then
  submenu 'Legacy Linux OS entries' --id 'linux-legacy-menu' {
    set root=${ospart}
    # run for every legacy os
    for legosp in /legacy/*; do
      # check if /legacy is empty
      if [ "${legosp}" = '/legacy/*' ]; then
        #echo "No legacy Linux OS entries were found!"
        # TODO: maybe add here an placeholder entry with a name as the message above
        break
      fi
      # set legacy os name from folder path
      # TODO: improve hanlding of non-alpha characters
      regexp --set 1:legos '^.*/(([[:alpha:]]|_)*)' $legosp

      # grub default sort order is reverse, so let's force these in the correct order
      for kerver in latest lts; do
        # set kernel version from the file path
        if [ ! -f /legacy/${legos}/boot/vmlinuz-linux-${kerver} ]; then
          continue
        fi
        menuentry "Legacy mode: ${legos}, Kernel ${kerver}" ${legos} ${kerver} --class ${legos} --class gnu-linux --class gnu --class os --id "${legos}-linux-${kerver}-legacy" {
          savedefault
          load_video
          set gfxpayload=keep
          set root=${ospart}
          set boot_mode=legacy
          set legos=${2}
          set kerver=${3}
          set_kparams_run
          echo "loading ${legos} linux-${kerver} ..."
          linux /legacy/${legos}/boot/vmlinuz-linux-${kerver} $kparams_run root=UUID=${osuuid} rw rootfstype=btrfs rootflags=noatime,ssd,space_cache,compress-force=zstd,subvol=legacy/${legos}
          echo 'loading initial ramdisk ...'
          initrd /legacy/${legos}/boot/intel-ucode.img /legacy/${legos}/boot/initramfs-linux-${kerver}.img
        } # end of menuentry
      done # end of for kerver in latest lts;

      # run for every other kernel image found
      for kernel_p in /legacy/${legos}/boot/vmlinuz-linux-*; do
        # set kernel version from the file path
        regexp --set 1:kerver '^.*/vmlinuz-linux-(.*)' $kernel_p
        # these already being managed above
        if [ "$kerver" = latest -o "$kerver" = lts ]; then
          continue
        fi
        menuentry "Legacy mode: ${legos}, Kernel ${kerver}" ${legos} ${kerver} --class ${legos} --class gnu-linux --class gnu --class os --id "${legos}-linux-${kerver}-legacy" {
          savedefault
          load_video
          set gfxpayload=keep
          set root=${ospart}
          set boot_mode=legacy
          set legos=${2}
          set kerver=${3}
          set_kparams_run
          echo "loading ${legos} linux-${kerver} ..."
          linux /legacy/${legos}/boot/vmlinuz-linux-${kerver} $kparams_run root=UUID=${osuuid} rw rootfstype=btrfs rootflags=noatime,ssd,space_cache,compress-force=zstd,subvol=legacy/${legos}
          echo 'loading initial ramdisk ...'
          initrd /legacy/${legos}/boot/intel-ucode.img /legacy/${legos}/boot/initramfs-linux-${kerver}.img
        } # end of menuentry
      done # end of for kernel_p in
    done # for legosp in /legacy/*;

  } # end of submenu legacy
fi

  #submenu 'OS Store Snapshots' --id 'linux-snapshots-menu' {
  # TODO: implement snapshots support
  # TODO: allow booting into both stateful and volatile modes
  # TODO: maybe snapshot volatile mode should be merged into live mode
  #}
  #submenu 'Forced Live Mode' --id 'linux-forced-live-menu' {
  # TODO: force live mode / use live media uuid
  # TODO: maybe call this volatile mode
  # TODO: maybe live mode should be merged into the recovery menu
  #}
  #submenu 'Recovery' --id 'linux-recovery-menu' {
  # TODO: recovery menu
  #       possible entries:
  #         - entry for each kernel and system (a-b), similar to live mode
  #         - snapshots in live mode
  #         - wipe /var, /home directly from grub or boot the recovery system to auto-wipe mode & reboot
  #         - reset system to default, wipe all stateful data
  #         - boot from network, tftp, nfs/samba
  #         - boot dedicated recovery system
  #}

# vim: et sw=2 ts=2
