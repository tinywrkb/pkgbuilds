#!/bin/bash

# TODO: add debug/verbose option

# set some default locations
libosdir=/usr/lib/os
modsdir=$libosdir/mods
patchesdir=$libosdir/patches
#resourcesdir=$libosdir/etc
resourcesdir=/usr/share/etc
scriptsdir=$libosdir/scripts

patch_conf() {
  if [ -f $patchesdir/$pkg.patch ]; then
    if [ $op = post ]; then
      echo "Patching $pkg with OS modifications..."
    elif [ $op = pre ]; then
      echo "Reverting $pkg patch with OS modifications.."
    else
      # this shouldn't happen
      echo "$FUNCNAME(): Something gone terribly wrong!" 1>&2
    fi
    patch --${patch_op} -p1 -i $patchesdir/$pkg.patch -B /
    [ $? -eq 0 ] || echo "Failed applying $pkg.patch in $patch_op mode" 1>&2
  fi
}

create_targets() {
  for e in ${target_list[@]}; do
    # strip permissions
    d=${e%,*}
    # set permissions flag
    p=-m${e#*,}
    # test if we actually have permissions set
    [ "$d" = "$e" ] && p=""
    mkdir $p -p $resourcesdir/$d
  done
}

remove_targets() {
  for ((i=${#target_list[@]}-1; i>=0; i--)); do
    e=${target_list[$i]}
    # strip permissions
    d=${e%,*}
    rmdir -v $resourcesdir/$d
  done
}

move_configs() {
  for f in ${mv_list[@]}; do
    source_file=${f%,*}
    target_file=${f#*,}
    # just in case f=file,
    [ "$source_file" = $f ] && \
      target_file=$f
    if [ $op = post ]; then
      mv /etc/$source_file $resourcesdir/$target_file
    else
      mv $resourcesdir/$target_file /etc/$source_file
    fi
  done
}

remove_dirs() {
  for e in ${rmdir_list[@]}; do
    # strip permissions
    d=${e%,*}
    rmdir -v /etc/$d
  done
}

recreate_dirs() {
  for ((i=${#rmdir_list[@]}-1; i>=0; i--)); do
    e=${rmdir_list[$i]}
    # strip permissions
    d=${e%,*}
    # set permissions flag
    p=-m${e#*,}
    # test if we actually have permissions set
    [ "$d" = "$e" ] && p=""
    mkdir $p -p /etc/$d
  done
}

create_links() {
  for f in ${link_list[@]}; do
    link_file=${f%,*}
    target_file=${f#*,}
    # just in case f=link,
    [ -z "$target_file" ] && \
      target_file=$f
    if [ $op = post ]; then
      ln -sT /var/etc/$target_file /etc/$link_file
    else
      rm -f /etc/$link_file
    fi
  done
}

remove_links() {
  create_links
}

run_script(){
  if [ $op = post ]; then
    source ${scriptsdir}/${pkg}.post
  elif [ $op = pre ]; then
    source ${scriptsdir}/${pkg}.pre
  else
    echo "$FUNCNAME(): Something gone terribly wrong!" 1>&2
  fi
}


process_pkg() {

  # reset arrays
  mv_list=() # path_in_etc;{target_in_resourcesdir}
  rmdir_list=() # in remval order
  link_list=() # path_in_etc;link_in_var/etc
  target_list=() # target_in_resourcesdir;{octal_permission}

  # source the mods file load arrays
  [ -f $modsdir/$pkg.mods ] && \
    source $modsdir/$pkg.mods

  case $op in
    post)
      # patch configs
      patch_op=forward
      patch_conf

      # create target dirs
      if [ ${#target_list[@]} -ne 0 ]; then
        echo "Creating target dirs..."
        create_targets
      fi

      # move configs
      if [ ${#mv_list[@]} -ne 0 ]; then
        echo "Moving configs..."
        move_configs
      fi

      # remove empty dirs in /etc
      if [ ${#rmdir_list[@]} -ne 0 ]; then
        echo "Removing empty dirs..."
        remove_dirs
      fi

      # create symlinks
      if [ ${#link_list[@]} -ne 0 ]; then
        echo "Creating symlinks..."
        create_links
      fi

      # run post script
      if [ -f ${scriptsdir}/${pkg}.post ]; then
        echo "Running custom post installation script..."
        run_script
      fi

      ;;
    pre)

      # remove symlinks
      if [ ${#link_list[@]} -ne 0 ]; then
        echo "Removing symlinks..."
       remove_links
      fi

      # recreate empty dirs in /etc
      if [ ${#rmdir_list[@]} -ne 0 ]; then
        echo "Recreate empty dirs in /etc..."
        recreate_dirs
      fi

      # move back configs
      if [ ${#mv_list[@]} -ne 0 ]; then
        echo "Moving back configs..."
        move_configs
      fi

      # remove empty target dirs
      if [ ${#target_list[@]} -ne 0 ]; then
        echo "Removing target dirs..."
        remove_targets
      fi

      # reverse patches
      patch_op=reverse
      patch_conf

      # run pre script
      if [ -f ${scriptsdir}/${pkg}.pre ]; then
        echo "Running custom pre installation script..."
        run_script
      fi

      ;;
    *)
      echo 'os-mods: Wrong operation, exiting...'
      exit 1
      ;;
  esac
}

# set operation type
op=$1

[ "$op" = post ] || [ "$op" = pre ] || { echo 'os-mods: wrong operation, exiting...'; exit 1; }

declare -A pkgs

while read -r pkg; do

  # TODO: run everything if uosys-mods was updated?

  # normalize package name
  pkg=${pkg#uosys-mods-}

  # provides/alias and multiple packages mods
  case $pkg in
    cups-filters)
      pkg=cups
      ;;
    lm_sensors-uosys)
      pkg=lm_sensors
      ;;
    openssh-xdg)
      pkg=openssh
      ;;
    pipewire-jack|pipewire-media-session|pipewire-pulse)
      pkg=pipewire
      ;;
    pipewire-fixed|pipewire-jack-fixed|pipewire-media-session-fixed|pipewire-pulse-fixed)
      pkg=pipewire
      ;;
    pipewire-fixed-git|pipewire-jack-fixed-git|pipewire-media-session-fixed-git|pipewire-pulse-fixed-git)
      pkg=pipewire
      ;;
    pipewire-git|pipewire-jack-git|pipewire-media-session-git|pipewire-pulse-git)
      pkg=pipewire
      ;;
    samba-cephfree)
      pkg=samba
      ;;
    smartmontools-uosys)
      pkg=smartmontools
      ;;
    systemd-swap)
      pkg=systemd
      ;;
  esac

  # only process package once
  [ "${pkgs[$pkg]}" = 1 ] && continue

  # mark package so we won't process it again
  pkgs+=([$pkg]=1)

  # TODO: imporve removal of packages properly?
  # TODO: need to run after tmpfiles?
  # TODO: different tests for different operations?
  $(pacman -Qq uosys-mods-${pkg} &>/dev/null) || \
    { echo "Missing package uosys-mods-${pkg} skipping os-mods"; continue; }
  echo "os-mods: Applying ${op} mods for ${pkg}..."
  process_pkg

done
