#!/bin/bash -e

kernels=()
ucodes=()
dracut_update=0
kernel_update=0
systemd_update=0
ucode_update=0
extra_opts=''

while read -r line; do
    case $line in
        # dracut update
        usr/lib/dracut/*)
            dracut_update=1
            ;;
        # systemd update
        usr/lib/systemd/system/sysinit.target.wants/*)
            systemd_update=1
            ;;
        # ucode update, legacy os compatibility
        usr/lib/firmware/*-ucode/*-ucode.img)
            ucode_update=1
            ucodes+=("/${line}")
            ;;
        # kernel update
        usr/lib/modules/*/pkgbase)
            kernel_update=1
            read -r pkgbase < "/${line}"
            kernels+=("${pkgbase}")
            ;;
        # rebuild dracut anyway
        *)
            dracut_update=1
            ;;
    esac
done


# ucode update, legacy os compatibility
if [ -d /boot ] && (( ucode_update )); then
    for ucode in "${ucodes[@]}"; do
        echo ":: Installing $(basename $ucode) microcode image"
        install -Dm644 $ucode /boot/$(basename $ucode)
    done
fi

if (( dracut_update )) || (( systemd_update )) || (( ucode_update )) ; then
    kernels=()
    for file in /lib/modules/*/pkgbase; do
        if read -r pkgbase &> /dev/null < "$file"; then
            kernels+=("${pkgbase}")
        fi
    done
fi


for kernel in "${kernels[@]}"; do

  add_drivers=''
  # modprobe vfio and gvt kernel modules
  force_drivers=' i915 kvmgt vfio vfio_iommu_type1 vfio_mdev vfio_pci vfio_virqfd virtio-gpu virtio-pci virtiofs fuse usb_storage sg virtio-scsi '
  # added fs driver: btrfs cifs exfat ext4 fat fuse msdos squashfs vfat virtiofs
  omit_drivers_fs=' 9p affs befs cachefiles ceph coda cramfs cuse dlm ecryptfs erofs f2fs fscache '
  omit_drivers_fs+=' gfs2 grace hfs hfsplus isofs jbd2 jffs2 jfs kafs '
  omit_drivers_fs+=' mac-celtic mac-centeuro mac-croatian mac-cyrillic mac-gaelic mac-greek mac-iceland mac-inuit mac-roman mac-romanian mac-turkish '
  omit_drivers_fs+=' mbcache minix '
  omit_drivers_fs+=' nfs_acl nfs_ssc '
  omit_drivers_fs+=' nilfs2 nls_cp1250 nls_cp1251 nls_cp1255 nls_cp737 nls_cp775 nls_cp850 nls_cp852 nls_cp855 nls_cp857 nls_cp860 nls_cp861 nls_cp862 nls_cp863 nls_cp864 nls_cp865 nls_cp866 nls_cp869 nls_cp874 nls_cp932 nls_cp936 nls_cp949 nls_cp950 nls_euc-jp nls_iso8859-1 nls_iso8859-13 nls_iso8859-14 nls_iso8859-15 nls_iso8859-2 nls_iso8859-3 nls_iso8859-4 nls_iso8859-5 nls_iso8859-6 nls_iso8859-7 nls_iso8859-9 nls_koi8-r nls_koi8-ru nls_koi8-u nls_utf8 '
  omit_drivers_fs+=' ocfs2 ocfs2_dlm ocfs2_dlmfs ocfs2_nodemanager ocfs2_stackglue ocfs2_stack_o2cb ocfs2_stack_user '
  omit_drivers_fs+=' omfs orangefs overlay pstore_blk pstore_zone '
  omit_drivers_fs+=' quota_tree quota_v1 quota_v2 '
  omit_drivers_fs+=' ramoops reiserfs romfs ubifs udf ufs vboxsf xfs zonefs '

  # added fs driver: media (cec)
  omit_drivers_ata=' pata_acpi pata_ali pata_amd pata_artop pata_atiixp pata_atp867x pata_cmd640 pata_cmd64x pata_cypress pata_efar pata_hpt366 pata_hpt37x pata_hpt3x2n pata_hpt3x3 pata_it8213 pata_it821x pata_jmicron pata_legacy pata_marvell pata_mpiix pata_netcell pata_ninja32 pata_ns87410 pata_ns87415 pata_oldpiix pata_optidma pata_opti pata_pcmcia pata_pdc2027x pata_pdc202xx_old pata_piccolo pata_radisys pata_rdc pata_rz1000 pata_sch pata_serverworks pata_sil680 pata_sis pata_sl82c105 pata_triflex pata_via '
  omit_drivers_block=' aoe drbd mtip32xx rnbd rsxx '
  omit_drivers_block+=' nbd pktcdvd skd sx8 umem xen-blkfront '
  omit_drivers_firewire=' firewire-core firewire-ohci firewire-sbp2 '
  omit_drivers_gpu=' ast bochs mgag200 vmwgfx drm_xen_front '
  omit_drivers_gpu_tiny=' cirrus gm12u320 hx8357d ili9225 ili9341 ili9486 mi0283qt repaper st7586 st7735r '
  omit_drivers_hv=' hv_vmbus '
  omit_drivers_infiniband=' ib_cm ib_core ib_srp iw_cm rdma_cm rtrs-client rtrs-core '
  omit_drivers_mcb=' mcb '
  omit_drivers_media=' '
  omit_drivers_message=' mptbase mptfc mptsas mptscsih mptspi '
  omit_drivers_net=' cnic cxgb4 libertas libertas_sdio qed '
  omit_drivers_parport=' parport '
  omit_drivers_pci=' pci-hyperv-intf pci-hyperv '
  omit_drivers_pcmcia=' i82092 pcmcia pcmcia_core pcmcia_rsrc pd6729 yenta_socket '
  # added scsi drivers: device_handler (scsi_dh_alua scsi_dh_emc scsi_dh_rdac) raid_class sg sr_mod virtio_scsi
  omit_drivers_scsi=' aacraid aic79xx aic7xxx aic94xx arcmsr bfa bnx2fc csiostor esas2r fcoe libfcoe fnic isci libfc lpfc qla2xxx qla4xxx '
  omit_drivers_scsi+=' libfc libsas lpfc megaraid_mbox megaraid_mm megaraid_sas mpt3sas mvsas '
  omit_drivers_scsi+=' pm80xx qedf qla2xxx qla4xxx smartpqi snic sym53c8xx '
  omit_drivers_scsi_pcmcia=' aha152x_cs qlogic_cs sym53c500_cs '
  omit_drivers_scsi+=' 3w-9xxx 3w-sas 3w-xxxx a100u2w advansys am53c974 atp870u BusLogic dc395x dmx3191d dpt_i2o '
  omit_drivers_scsi+=' esp_scsi fdomain gdth hpsa hptiop hv_storvsc imm initio ipr ips iscsi_boot_sysfs libiscsi '
  omit_drivers_scsi+=' megaraid mvumi myrb myrs pmcraid ppa qla1280 qlogicfas408 scsi_debug '
  omit_drivers_scsi+=' scsi_transport_fc scsi_transport_iscsi scsi_transport_sas scsi_transport_spi scsi_transport_srp '
  omit_drivers_scsi+=' stex vmw_pvscsi wd719x xen-scsifront '
  omit_drivers_target=' target_core_mod tcm_loop '
  omit_drivers_visorbus=' visorbus visorhba '

  omit_drivers=" $omit_drivers_fs $omit_drivers_ata $omit_drivers_block $omit_drivers_firewire "
  omit_drivers+=" $omit_drivers_gpu $omit_drivers_gpu_tiny $omit_drivers_hv $omit_drivers_infiniband "
  omit_drivers+=" $omit_drivers_mcb $omit_drivers_media $omit_drivers_message $omit_drivers_net "
  omit_drivers+=" $omit_drivers_parport $omit_drivers_pci $omit_drivers_pcmcia $omit_drivers_scsi "
  omit_drivers+=" $omit_drivers_scsi_pcmcia $omit_drivers_target $omit_drivers_visorbus "

  # enabled modules:
  #   base bash dracut-systemd drm i18n resume shutdown systemd systemd-initrd terminfo
  #   kernel-modules kernel-modules-extra udev-rules
  #   plymouth
  #   btrfs fs-lib
  #   create-machine-id uosys
  #
  # disabled dracut: modules:
  # TODO: disabled modules that are needed to be tested for pulling-in other modules & binaries:
  #   rootfs-block (bins: umount,tr + udev rule creation with block-genrules.sh)
  # TODO: test without: systemd-sysusers dbus dbus-broker dbus-daemon systemd-ask-password systemd-coredump systemd-modules-load systemd-repart systemd-sysctl systemd-sysusers
  add_dracutmodules=' btrfs fs-lib '
  omit_dracutmodules=' biosdevname bootchart busybox cifs dash dm fcoe fcoe-uefi iscsi mksh multipath '
  omit_dracutmodules+=' nbd network network-legacy nfs rngd stratis '
  omit_dracutmodules+=' crypt dmraid lunmask lvm mdraid modsign nvdimm rootfs-block usrmnt qemu qemu-net kernel-network-modules '

  path="$(grep -lE "^${kernel}\$" /usr/lib/modules/*/pkgbase)"
  version=$(basename "${path%/pkgbase}")
  read -r pkgbase < "$path"

  # per kernel package extra dracut options
  case $pkgbase in
    linux-lts419)
      add_drivers+=' '
      # sata drivers are not built into 419lts kernel
      force_drivers+=' ahci libahci virtio '
      ;;
    #*)
    #  add_drivers+=' '
    #  force_drivers+=' '
    #  ;;
  esac

  # make sure the default kernel package uses the linux-${version] naming scheme
  #  so it will work correctly with our scripted bootloader menu
  [ "${pkgbase}" = linux ] && pkgbase=linux-latest

  # copy into /boot, legacy os compatibility
  [ -d /boot ] && install -Dm0644 "${path%'/pkgbase'}/vmlinuz" "/boot/vmlinuz-${pkgbase}"

  echo ":: Building initramfs for $kernel-$version"

  # TODO: maybe switch to zstd with high compression --compress "/bin/zstd/-T0 -18"
  dracut \
    --force \
    --quiet \
    --no-early-microcode \
    --no-hostonly \
    --zstd \
    --add "$add_dracutmodules" \
    --omit "$omit_dracutmodules" \
    --add-drivers="$add_drivers" \
    --omit-drivers="$omit_drivers" \
    --force-drivers="$force_drivers" \
    "${path%'/pkgbase'}/initrd" \
    --kver "${version}"

  # fix dracut install nonesense permissions
  chmod 0644 "${path%'/pkgbase'}/initrd"

  # copy into /boot, legacy os compatibility
  # TODO: drop this legacy stuff, maybe move into separate packaged hook, also kernel and ucode should be dropped
  [ -d /boot ] && install -Dm644 "${path%'/pkgbase'}/initrd" "/boot/initramfs-${pkgbase}.img"
done
