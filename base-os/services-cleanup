#!/bin/bash

unset cleanup_all pkg pkgs
declare -A pkgs

while read -r pkg; do

  # provides/alias
  case $pkg in
    openssh-xdg)
      pkg=openssh
      ;;
    pipewire-fixed-git|pipewire-git)
      pkg=pipewire
      ;;
    pipewire-media-session|pipewire-media-session-git)
      pkg=pipewire
      ;;
    systemd-idmap)
      pkg=systemd
      ;;
    wireplumber|wireplumber-git)
      pkg=pipewire
      ;;
  esac

  # base-os was updated
  if [ "${pkg}" = "base-os" ]; then
    echo "services-cleanup: ${pkg} was changed, will try removing all services!"
    cleanup_all=yes
    continue
  fi

  # only process package once
  [ "${pkgs[$pkg]}" = 1 ] && continue

  # mark package so we won't process it again
  pkgs+=([$pkg]=1)

done

cleanup_service() {
  service_list=()
  rmdir_list=()

  local pkg=$1

  if [ ! -f "/usr/lib/os/services_cleanup/${pkg}" ]; then
   echo "Missing services_cleanup/${pkg} skipping service-cleanup"
   return 1
  fi

  source "/usr/lib/os/services_cleanup/${pkg}"


  if [ ${#service_list[@]} -ne 0 ]; then
    echo "service-cleanup: Removing ${pkg} enabled services..."
    for f in "${service_list[@]}"; do
      /bin/rm -fv "/usr/share/etc/systemd/${f}"
    done
  fi

  if [ ${#rmdir_list[@]} -ne 0 ]; then
    echo "Removing empty systemd folders..."
    for d in "${rmdir_list[@]}"; do
      /bin/rmdir -v --ignore-fail-on-non-empty "/usr/share/etc/systemd/${d}"
    done
  fi
}

if [ "${cleanup_all}" = "yes" ]; then
  (
    shopt -s nullglob
    for f in $(find /usr/lib/os/services_cleanup/ -type f | sort ); do
      pkg=$(basename "${f}");
      echo "services-cleanup: Processing ${pkg}..."
      cleanup_service ${pkg}
    done
  )
else
  for pkg in ${!pkgs[@]}; do
    echo "services-cleanup: Processing ${pkg}..."
    cleanup_service ${pkg}
  done
fi

exit 0
